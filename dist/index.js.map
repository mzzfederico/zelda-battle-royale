{
  "version": 3,
  "sources": ["../../engine/System.ts", "../../engine/Component.ts", "../../engine/Components/Collider.Component.ts", "../../engine/Utils/rounding.ts", "../../engine/Components/Position.Component.ts", "../../engine/Systems/Collision.System.ts", "../../engine/Components/Input.Component.ts", "../../engine/Systems/Input.System.ts", "../../engine/Components/Movement.Component.ts", "../../engine/Systems/Movement.System.ts", "../../engine/Components/Sprite.Component.ts", "../../engine/Components/SpriteAnimation.Component.ts", "../../engine/Systems/Animation.System.ts", "../../engine/Components/Tilemap.Component.ts", "../../engine/Utils/canvasRendering.ts", "../../engine/Systems/Canvas.System.ts", "../../engine/GameLoop.ts", "../src/constants.ts", "../../engine/Systems/PNGSpriteRender.System.ts", "../../engine/Utils/dice.ts", "../../engine/Scene.ts", "../../node_modules/uuid/dist/esm-browser/rng.js", "../../node_modules/uuid/dist/esm-browser/regex.js", "../../node_modules/uuid/dist/esm-browser/validate.js", "../../node_modules/uuid/dist/esm-browser/stringify.js", "../../node_modules/uuid/dist/esm-browser/v4.js", "../../engine/Entity.ts", "../src/Objects/Coin.ts", "../src/Components/Coins.Component.ts", "../src/Systems/SystemCoinMeter.ts", "../src/Objects/Doorway.ts", "../../engine/Assets/Tileset.ts", "../src/Tilesets/bricks.ts", "../src/Objects/Floor.ts", "../src/Components/Health.Component.ts", "../src/Objects/Player.ts", "../src/Systems/SystemDebugPlayer.ts", "../src/Objects/Wall.ts", "../src/Scenes/Room/index.ts", "../src/index.ts"],
  "sourcesContent": ["import Scene from './Scene';\n\nexport default class System {\n  $scene: Scene;\n\n  registerScene(parentScene: Scene) {\n    this.$scene = parentScene;\n  }\n\n  draw(time, entities): void {\n    /* Runs after updating the state */\n  }\n\n  update(time, entities): void {\n    /* Runs the system on each frame */\n  }\n\n  start(entities): void {\n    /* Runs the system on start */\n  }\n\n  cleanup(entity): void {\n    /* Handles cleanup of entity after remotion */\n  }\n\n  end(entities): void {\n    /* Handles cleanup after unmount of scene */\n  }\n}\n", "export default class Component {\n  name: string;\n\n  entityId: string;\n\n  registerEntityId(id: string): void {\n    this.entityId = id;\n  }\n}\n", "import Component from '../Component';\nimport Entity from '../Entity';\nimport { Coordinate2d } from '../Types/Coordinate2d';\n\nexport default class Collider extends Component {\n  width: number;\n\n  height: number;\n\n  isStatic: boolean;\n\n  isRigid: boolean;\n\n  onCollision: Function;\n\n  safePosition: Coordinate2d;\n\n  parentEntity: Entity;\n\n  constructor({\n    width, height, isStatic = false, isRigid = false, onCollision = (target) => { },\n  }) {\n    super();\n\n    this.width = width;\n    this.height = height;\n    this.isStatic = isStatic;\n    this.isRigid = isRigid;\n    this.onCollision = onCollision;\n  }\n\n  saveSafePosition(x: number, y: number): void {\n    this.safePosition = { x, y };\n  }\n\n  getSafePosition(): Coordinate2d {\n    return this.safePosition;\n  }\n}\n", "export function roundFloat(num: number, places: number = 1000): number {\n  return (parseInt(`${num * places}`) / places);\n}\n", "import Component from '../Component';\nimport { roundFloat } from '../Utils/rounding';\n\nexport default class Position extends Component {\n  x: number;\n\n  y: number;\n\n  constructor({ x, y }) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  setPosition(x, y): void {\n    this.x = isNaN(x) ? this.x : x;\n    this.y = isNaN(y) ? this.y : y;\n  }\n\n  transformation(x, y): void {\n    if (x === 0 && y === 0) return;\n    this.setPosition(roundFloat(this.x + x), roundFloat(this.y + y));\n  }\n}\n", "import System from '../System';\nimport Collider from '../Components/Collider.Component';\nimport Position from '../Components/Position.Component';\nimport Entity from '../Entity';\n\nexport default class Collision extends System {\n  update(time: number, entities: Entity[]): void {\n    this.checkCurrentCollisions(entities);\n  }\n\n  checkCurrentCollisions(entities: Entity[]): void {\n    /* Check only colliders & enabled ones */\n    const entitiesWithCollidors = entities\n      .filter((target: Entity) => target.getComponent(Collider) && !target.isDisabled);\n\n    entitiesWithCollidors.forEach(\n      (source: Entity) => entitiesWithCollidors\n        .filter((target) => target.id !== source.id)\n        .forEach((target) => {\n          const collisionOccurred = this.checkCollision(\n            {\n              collider: source.getComponent(Collider) as Collider,\n              position: source.getComponent(Position) as Position\n            },\n            {\n              collider: target.getComponent(Collider) as Collider,\n              position: target.getComponent(Position) as Position\n            },\n          );\n\n          if (collisionOccurred) {\n            (source.getComponent(Collider) as Collider)\n              .onCollision(target, this.$scene);\n          }\n        }),\n    );\n  }\n\n  checkCollision(a: CollisionCheckProps, b: CollisionCheckProps): boolean {\n    // if (a.id === \"wall\") console.log(a, b);\n    if (a.position.x < (b.position.x + b.collider.width)\n      && (a.position.x + a.collider.width) > b.position.x\n      && a.position.y < (b.position.y + b.collider.height)\n      && (a.position.y + a.collider.height) > b.position.y) {\n      return true;\n    }\n    return false;\n  }\n}\n\ntype CollisionCheckProps = {\n  position: Position;\n  collider: Collider;\n}\n", "import Component from '../Component';\n\nexport default class Input extends Component {\n  config: Object = {};\n\n  constructor({ config }) {\n    super();\n\n    this.config = config;\n  }\n}\n", "import System from '../System';\nimport Input from '../Components/Input.Component';\nimport Entity from '../Entity';\n\nexport default class InputManager extends System {\n  inputs: Object = {};\n\n  update(time: number, entities: Entity[]): void {\n    /* Gathers all keys to be watched */\n    Object.entries(this.inputs).forEach((inputEntry: [string, InputEntry]) => {\n      const entry = inputEntry[1];\n      if (entry.pressed) entry.event(time);\n    });\n  }\n\n  deleteKey(key: string): void {\n    delete this.inputs[key];\n  }\n\n  registerKey(key: string, event): void {\n    this.inputs = { ...this.inputs, [key]: { pressed: false, event } };\n  }\n\n  handleKeyEvent = (event): void => {\n    const { key, type } = event;\n    if (key in this.inputs) {\n      if (type === 'keydown') this.inputs[key].pressed = true;\n      if (type === 'keyup') this.inputs[key].pressed = false;\n    }\n  }\n\n  end(): void {\n    document.removeEventListener('keydown', this.handleKeyEvent);\n    document.removeEventListener('keyup', this.handleKeyEvent);\n  }\n\n  start = (entities: Entity[]): void => {\n    /* Gathers all keys to be watched */\n    entities\n      .filter((entity: Entity) => entity.getComponent(Input))\n      .forEach((entity: Entity) => {\n        Object.entries((entity.getComponent(Input) as Input).config).forEach(\n          ([key, event]) => this.registerKey(key, event),\n        );\n      });\n\n    document.addEventListener('keydown', this.handleKeyEvent);\n    document.addEventListener('keyup', this.handleKeyEvent);\n  }\n}\n\nexport type InputEntry = {\n  event: Function;\n  pressed: boolean;\n}", "import Component from '../Component';\nimport { roundFloat } from '../Utils/rounding';\n\nexport default class Movement extends Component {\n  x: number;\n\n  y: number;\n\n  onStart: Function;\n\n  onStop: Function;\n\n  constructor({\n    x, y, onStart = () => { }, onStop = () => { },\n  }) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.onStart = onStart;\n    this.onStop = onStop;\n  }\n\n  addSpeed(x, y) {\n    this.x = roundFloat(this.x + x, 100_000);\n    this.y = roundFloat(this.y + y, 100_000);\n  }\n\n  setSpeed(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  multiplySpeed(x, y) {\n    this.x = roundFloat(this.x * x, 100_000);\n    this.y = roundFloat(this.y * y, 100_000);\n  }\n\n  clearSpeed() {\n    this.x = 0;\n    this.y = 0;\n  }\n\n  isMoving() {\n    return this.x === 0 && this.y === 0;\n  }\n}\n", "import System from '../System';\nimport Collider from '../Components/Collider.Component';\nimport Movement from '../Components/Movement.Component';\nimport Position from '../Components/Position.Component';\nimport Entity from '../Entity';\n\nexport default class MovementSystem extends System {\n  update(timeframe: number = 0, entities: Entity[]): void {\n    entities\n      .filter((entity: Entity): boolean => (\n        !!entity.getComponent(Position)\n        && !!entity.getComponent(Movement)\n        && !!entity.getComponent(Collider)\n      ))\n      .forEach((entity: Entity): void => {\n        const position = entity.getComponent(Position) as Position;\n        const movement = entity.getComponent(Movement) as Movement;\n        const collider = entity.getComponent(Collider) as Collider;\n\n        const { x, y } = movement;\n\n        const { x: currentX, y: currentY } = position;\n        collider.saveSafePosition(currentX, currentY);\n        position.transformation(x * timeframe, y * timeframe);\n        movement.multiplySpeed(0.25, 0.25);\n\n        /* Hacky way to notify each component that it is being moved around or not */\n        if (movement.x + movement.y !== 0) {\n          movement.onStart({ x, y });\n        } else {\n          movement.onStop();\n        }\n      });\n  }\n}\n", "import Component from '../Component';\n\nexport default class Sprite extends Component {\n  src: string;\n\n  width: number;\n\n  height: number;\n\n  constructor({ src, width = 1, height = 1 }) {\n    super();\n\n    this.src = src;\n    this.width = width;\n    this.height = height;\n  }\n\n  replaceSource(src: string): void {\n    if (src) this.src = src;\n  }\n}\n", "import Component from '../Component';\nimport { roundFloat } from '../Utils/rounding';\n\nexport default class SpriteAnimation extends Component {\n  states: SpriteAnimationState[]\n\n  current: string;\n\n  animationTime: number;\n\n  animationStep: number;\n\n  constructor(states: SpriteAnimationState[], defaultState: string = '') {\n    super();\n\n    this.animationStep = 0;\n    this.animationTime = 0;\n    this.states = states;\n    this.current = defaultState || states[0].name;\n  }\n\n  getState = (): SpriteAnimationState => this.states.find((searchElement) => searchElement.name === this.current)\n\n  changeState = (newState: string): string => {\n    if (this.current !== newState) {\n      this.current = newState;\n    }\n    return this.current;\n  }\n\n  nextState = (): void => {\n    const currentState: SpriteAnimationState = this.getState();\n    if (currentState.nextState) this.changeState(currentState.nextState);\n  }\n\n  clearTime = (): void => {\n    this.animationTime = 0;\n  }\n\n  updateTime = (milliseconds: number): void => {\n    if (isNaN(milliseconds)) return;\n    this.animationTime = roundFloat(this.animationTime + milliseconds, 1);\n  }\n\n  updateStep = (): void => {\n    const currentState: SpriteAnimationState = this.getState();\n    this.animationStep += 1;\n    if (currentState.frames.length <= this.animationStep) {\n      this.animationStep = 0;\n    }\n  }\n\n  getCurrentFrame = (): string => {\n    const currentState: SpriteAnimationState = this.getState();\n    return currentState.frames[this.animationStep];\n  }\n}\nexport type SpriteAnimationState = {\n  name: string;\n  interval: number;\n  frames: string[];\n  nextState?: string;\n}\n", "import System from '../System';\nimport Sprite from '../Components/Sprite.Component';\nimport SpriteAnimation, { SpriteAnimationState } from '../Components/SpriteAnimation.Component';\nimport Entity from '../Entity';\n\nexport default class AnimationSystem extends System {\n  draw(time, entities) {\n    entities\n      .filter((entity) => !!entity.getComponent(SpriteAnimation))\n      .forEach(\n        (entity: Entity): void => {\n          const animation = entity.getComponent(SpriteAnimation) as SpriteAnimation;\n          const sprite = entity.getComponent(Sprite) as Sprite;\n          const currentState: SpriteAnimationState = animation.getState();\n\n          /* Update animation clock and steps */\n          animation.updateTime(time);\n          if (animation.animationTime > currentState.interval) {\n            animation.updateStep();\n            animation.clearTime();\n          }\n\n          /* Update sprite source on frame change */\n          const currentSrc = sprite.src;\n          const currentFrame = animation.getCurrentFrame();\n\n          if (currentSrc !== currentFrame) {\n            sprite.replaceSource(currentFrame);\n          }\n        },\n      );\n  }\n}\n", "import Component from '../Component';\nimport Tileset from '../Assets/Tileset';\n\nexport default class Tilemap extends Component {\n  set: Tileset = null;\n\n  map: Array<any> = [[]]; /* TODO: type for tilemap array of tiles values */\n\n  constructor(set, map) {\n    super();\n    this.set = set;\n    this.map = map;\n  }\n}\n", "const ZOOM: number = parseInt(process.env.ZOOM) || 2;\nconst TILE_SIZE: number = parseInt(process.env.TILE_SIZE) || 16;\nconst realTileSize: number = TILE_SIZE * ZOOM;\n\nexport function drawTileMap(ctx, map, tileset, offset) {\n  const image = new Image();\n  image.src = tileset.src;\n\n  function getTile(col, row) {\n    return map[row][col];\n  }\n\n  image.onload = () => {\n    for (let c = 0; c < map[0].length; c++) {\n      for (let r = 0; r < map.length; r++) {\n        const tile = getTile(c, r);\n        if (tile >= 0) {\n          ctx.drawImage(\n            image, // image\n            (tile % tileset.w) * TILE_SIZE, // source x\n            Math.floor(tile / tileset.w) * TILE_SIZE, // source y\n            TILE_SIZE, // source width\n            TILE_SIZE, // source height\n            (c * realTileSize) + (offset.x * realTileSize), // target x\n            (r * realTileSize) + (offset.y * realTileSize), // target y\n            realTileSize, // target width\n            realTileSize, // target height\n          );\n        }\n      }\n    }\n  };\n}\n\nexport function drawTileImage(ctx, position = { x: 1, y: 1 }, size = { x: 1, y: 1 }, tileSrc = '') {\n  const image = new Image();\n  image.src = tileSrc;\n\n  image.onload = () => {\n    ctx.drawImage(\n      image, // image\n      position.x * size.x * TILE_SIZE, // source x\n      position.y * size.y * TILE_SIZE, // source y\n      TILE_SIZE, // source width\n      TILE_SIZE, // source height\n      position.x * realTileSize, // target x\n      position.y * realTileSize, // target y\n      realTileSize, // target width\n      realTileSize, // target height\n    );\n  };\n}\n", "import System from '__Core/System';\nimport Position from '__Components/Position.Component';\nimport Tilemap from '__Components/Tilemap.Component';\n\nimport { drawTileMap } from '__Utils/canvasRendering';\n\nconst ZOOM: number = parseInt(process.env.ZOOM) || 2;\n\nexport default class CanvasRenderer extends System {\n  height: number = 300;\n\n  width: number = 150;\n\n  ctx: CanvasRenderingContext2D;\n\n  constructor(width, height) {\n    super();\n    this.height = height;\n    this.width = width;\n  }\n\n  drawTilemapsFromEntities(entities) {\n    entities\n      .filter((entity) => !!entity.getComponent(Tilemap) && !!entity.getComponent(Position))\n      .forEach(\n        (entity) => {\n          const tilemap = entity.getComponent(Tilemap) as Tilemap;\n          const position = entity.getComponent(Position) as Position;\n\n          drawTileMap(this.ctx, tilemap.map, tilemap.set, position);\n        },\n      );\n  }\n\n  start(entities): void {\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('id', 'CanvasRenderer');\n    this.ctx = canvas.getContext('2d');\n\n    canvas.setAttribute('width', `${this.width * ZOOM}`);\n    canvas.setAttribute('height', `${this.height * ZOOM}`);\n\n    this.drawTilemapsFromEntities(entities)\n\n    document.getElementById('root').append(canvas);\n  }\n  end() {\n    document.getElementById('CanvasRenderer').remove();\n  }\n}\n", "import Scene from '__Core/Scene';\nimport System from '__Core/System';\nimport Collision from '__Systems/Collision.System';\nimport Input from '__Systems/Input.System';\nimport Movement from '__Systems/Movement.System';\nimport Animation from '__Systems/Animation.System';\nimport Canvas from '__Systems/Canvas.System';\n\nconst ZOOM: number = parseInt(process.env.ZOOM) || 2;\nconst TILE_SIZE: number = parseInt(process.env.TILE_SIZE) || 16;\nconst ROOM_WIDTH: number = parseInt(process.env.ROOM_WIDTH) || 20;\nconst ROOM_HEIGHT: number = parseInt(process.env.ROOM_HEIGHT) || 12;\n\nexport default class GameLoop {\n  lastRender: number;\n\n  scenes: Scene[];\n\n  currentScene: Scene;\n\n  coreSystems: System[];\n\n  constructor(scenes: Scene[] = [], initialScene: Scene = scenes[0]) {\n    this.coreSystems = [\n      new Canvas(ROOM_WIDTH * TILE_SIZE, ROOM_HEIGHT * TILE_SIZE),\n      new Input(),\n      new Movement(),\n      new Collision(),\n      new Animation()\n    ];\n\n    this.lastRender = 0;\n    this.scenes = scenes;\n    this.currentScene = initialScene;\n  }\n\n  getSystems = (): System[] => [\n    ...this.coreSystems,\n    ...this.currentScene.systems\n  ]\n\n  start = (): void => {\n    this.getSystems().forEach((system: System): void => {\n      system.registerScene(this.currentScene);\n      system.start(this.currentScene.entities);\n    });\n\n    console.log(this.currentScene);\n\n    window.requestAnimationFrame(this.loop);\n  }\n\n  loop = (timestamp: number = 0): void => {\n    const progress: number = timestamp - this.lastRender;\n    this.getSystems().forEach((system: System): void => system.update(progress, this.currentScene.entities));\n    this.getSystems().forEach((system: System): void => system.draw(progress, this.currentScene.entities));\n\n    this.lastRender = timestamp;\n    window.requestAnimationFrame(this.loop);\n  }\n\n  end = () => {\n    this.getSystems().forEach((system: System): void => system.end(this.currentScene.entities));\n  }\n}\n", "export const TILE_SIZE = 16;\nexport const ROOM_WIDTH = 20;\nexport const ROOM_HEIGHT = 12;\nexport const ZOOM = 2;", "import System from '../System';\nimport Position from '__Components/Position.Component';\nimport Sprite from '__Components/Sprite.Component';\nimport Entity from '__Core/Entity';\n\nconst ZOOM: number = parseInt(process.env.ZOOM) || 2;\nconst TILE_SIZE: number = parseInt(process.env.TILE_SIZE) || 16;\n\nexport default class SpriteRenderer extends System {\n  draw(time: number, entities: Entity[]): void {\n    /* Runs the system on each frame */\n    entities\n      .filter((entity: Entity) => entity.getComponent(Sprite))\n      .forEach((entity: Entity) => {\n        const { isDisabled } = entity;\n        const sprite = document.getElementById(entity.id) as HTMLImageElement;\n        if (!sprite) return;\n        if (!isDisabled) this.updateSprite(sprite, entity);\n        if (isDisabled) this.hideSprite(sprite);\n      });\n  }\n\n  start = (entities: Entity[]): void => {\n    /* Runs the system on start */\n    entities\n      .filter((entity: Entity) => !!entity.getComponent(Sprite))\n      .forEach((entity: Entity) => {\n        const sprite = document.createElement('img');\n        this.updateSprite(sprite, entity);\n        document.getElementById('root').append(sprite);\n      });\n  }\n\n  updateSprite = (sprite: HTMLImageElement, entity: Entity): void => {\n    if (entity.id) sprite.setAttribute('id', entity.id);\n\n    const { x, y } = entity.getComponent(Position) as Position;\n    const { src, width, height } = entity.getComponent(Sprite) as Sprite;\n\n    sprite.classList.add(entity.tag);\n\n    sprite.style.position = 'absolute';\n\n    sprite.style.left = `${Math.floor(x * ZOOM * TILE_SIZE)}px`;\n    sprite.style.top = `${Math.floor(y * ZOOM * TILE_SIZE)}px`;\n\n    sprite.style.width = `${Math.floor(width * ZOOM * TILE_SIZE)}px`;\n    sprite.style.height = `${Math.floor(height * ZOOM * TILE_SIZE)}px`;\n    sprite.style.display = 'block';\n\n    sprite.src = src;\n  }\n\n  hideSprite(sprite: HTMLImageElement): void {\n    sprite.style.display = 'none';\n  }\n\n  cleanup(entity: Entity) {\n    if (entity.getComponent(Sprite)) {\n      document.getElementById(entity.id).remove();\n    }\n  }\n\n  end(entities: Entity[]) {\n    entities.forEach(this.cleanup);\n  }\n}\n", "export default function rollDice(min: number, max: number): number {\n  return (min - 1) + Math.ceil(Math.random() * (max - min + 1));\n}\n", "import Entity from '__Core/Entity';\nimport System from '__Core/System';\n\nexport default class Scene {\n  target: HTMLElement;\n\n  entities: Entity[];\n\n  systems: System[];\n\n  lastRender: number;\n\n  constructor(targetId: string, entities: Entity[] = [], systems: System[] = []) {\n    this.target = document.getElementById(targetId);\n    this.entities = entities;\n    this.systems = systems;\n    return this;\n  }\n\n  addEntity = (newEntity: Entity): void => {\n    this.entities.push(newEntity);\n  }\n\n  removeEntity = (EntityId: string): void => {\n    const assertEntity = (entity) => entity.id === EntityId;\n\n    this.systems.forEach((system: System) => {\n      system.cleanup(this.entities.find(assertEntity));\n    });\n\n    this.entities = this.entities.filter((e) => !assertEntity(e));\n  }\n\n  addSystem = (newSystem: System): void => {\n    newSystem.registerScene(this);\n    this.systems.push(newSystem);\n  }\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "import { v4 as uuidv4 } from 'uuid';\nimport Component from '__Core/Component';\nimport Position from '__Components/Position.Component';\n\nexport default class Entity {\n  id: string;\n\n  tag: string;\n\n  components: Object;\n\n  isDisabled: boolean;\n\n  constructor({\n    id = uuidv4(), x = 0, y = 0, tag = '', components = {}, isDisabled = false,\n  }: IEntityProps) {\n    this.id = id;\n    this.tag = tag;\n    this.components = { ...components };\n    this.isDisabled = isDisabled;\n    /* Default components */\n    this.addComponent(new Position({ x, y }));\n  }\n\n  getComponent(componentClass): unknown {\n    return this.components[componentClass.name];\n  }\n\n  addComponent(component: Component): Entity {\n    this.components[component.constructor.name] = component;\n    component.registerEntityId(this.id);\n    return this;\n  }\n\n  removeComponent(component: Component): Entity {\n    delete this.components[component.name];\n    return this;\n  }\n\n  setDisabled(newState: boolean): void {\n    this.isDisabled = newState;\n  }\n}\n\ninterface IEntityProps {\n  id?: string;\n  tag?: string;\n  x?: number;\n  y?: number;\n  components?: Object;\n  isDisabled?: boolean;\n}\n", "import { v4 as uuidv4 } from 'uuid';\n\nimport Collider from \"__Components/Collider.Component\";\nimport Sprite from \"__Components/Sprite.Component\";\nimport Entity from \"__Core/Entity\";\nimport coin from \"../Sprites/coin/coin.png\";\n\nexport default class Coin extends Entity {\n    constructor({ x = 3, y = 3 }) {\n        super({ id: uuidv4(), x, y, tag: \"coin\" });\n\n        const [width, height] = [0.3, 0.5];\n\n        const coinSprite = new Sprite({ src: coin, width, height });\n        const coinCollider = new Collider({ width, height, isStatic: false });\n        this.addComponent(coinSprite);\n        this.addComponent(coinCollider);\n    }\n}\n", "import Component from \"__Core/Component\";\n\nexport default class Coins extends Component {\n    value: number = 0;\n\n    constructor(initialCoins: number) {\n        super();\n        this.value = initialCoins;\n    }\n\n    earnCoins(value) {\n        this.value += value;\n    }\n\n    spendCoins(value) {\n        this.value -= value;\n    }\n}", "import System from \"__Core/System\";\nimport Coins from \"../Components/Coins.Component\";\nimport coinSrc from \"../Sprites/coin/coin.png\";\n\nexport default class SystemCoinMeter extends System {\n    update(time, entities) {\n        entities\n            .filter(entity => entity.tag === \"player\")\n            .forEach((entity) => {\n                if (entity.getComponent(Coins)) {\n                    const meter = document.getElementById(\"player-coins-meter\");\n                    if (meter.childElementCount < entity.getComponent(Coins).value) {\n                        meter.innerHTML = ``;\n                        let i = 0;\n                        while (i < entity.getComponent(Coins).value) {\n                            meter.innerHTML += `<img src=\"${coinSrc}\"/>`;\n                            i++;\n                        }\n                    }\n                }\n            });\n    }\n\n    start() {\n        const meter = document.createElement(\"div\");\n        meter.setAttribute(\"id\", \"player-coins-meter\");\n        document.getElementById(\"root\").append(meter);\n    }\n\n    end() {\n        const meter = document.getElementById(\"player-coins-meter\");\n        meter.remove();\n    }\n}", "import Collider from \"__Components/Collider.Component\";\nimport Entity from \"__Core/Entity\";\n\nexport enum DoorwayDirection {\n    Vertical,\n    Horizontal,\n}\n\nexport default class Doorway extends Entity {\n    constructor({ x = 0, y = 1, direction = DoorwayDirection.Horizontal }: DoorwayProps) {\n        super({ tag: \"doorway\", x, y });\n\n        let width = 1;\n        let height = 1;\n        if (direction === DoorwayDirection.Vertical) width = 0.1, height = 2;\n        if (direction === DoorwayDirection.Horizontal) width = 2, height = 0.1;\n\n        this.addComponent(new Collider({ width, height, isRigid: true }));\n    }\n}\n\ntype DoorwayProps = {\n    x: number;\n    y: number;\n    direction: DoorwayDirection\n}", "export default class Tileset {\n  src: string;\n\n  w: number;\n\n  h: number;\n\n  tileSize: number;\n\n  constructor({\n    src = '', width = 11, height = 3, tileSize = 16,\n  }) {\n    this.src = src;\n    this.w = width;\n    this.h = height;\n    this.tileSize = tileSize;\n  }\n}\n", "import Tileset from \"__Assets/Tileset\"\nimport bricksSrc from \"./bricks.png\";\n\nconst BricksTileset = new Tileset({ src: bricksSrc, width: 11, height: 3, tileSize: 16 });\n\nexport default BricksTileset;", "import Tilemap from \"__Components/Tilemap.Component\";\nimport Entity from \"__Core/Entity\";\nimport { ROOM_HEIGHT, ROOM_WIDTH } from \"../constants\";\nimport BricksTileset from \"../Tilesets/bricks\";\n\nexport default class Floor extends Entity {\n    constructor() {\n        super({ tag: \"floor\" });\n\n        /* Empty space */\n        const rows = Array.from(Array(ROOM_HEIGHT), () => new Array(ROOM_WIDTH).fill(-1));\n\n        /* Corners */\n        rows[0][0] = 0;\n        rows[0][ROOM_WIDTH - 1] = 2;\n        rows[ROOM_HEIGHT - 1][0] = 22;\n        rows[ROOM_HEIGHT - 1][ROOM_WIDTH - 1] = 24;\n\n        this.addComponent(new Tilemap(BricksTileset, rows));\n    }\n}", "import Component from \"__Core/Component\";\n\nexport default class Health extends Component {\n    value: number = 3;\n\n    constructor(initialHealth: number = 3) {\n        super();\n        this.value = initialHealth;\n    }\n\n    incrementHealth(value) {\n        this.value += value;\n    }\n\n    decrementHealth(value) {\n        this.value -= value;\n    }\n}", "\nimport Entity from \"__Core/Entity\";\n\nimport Link_1 from \"../Sprites/Link/1.png\";\nimport Link_2 from \"../Sprites/Link/2.png\";\nimport Link_3 from \"../Sprites/Link/3.png\";\nimport Link_4 from \"../Sprites/Link/4.png\";\nimport Link_5 from \"../Sprites/Link/5.png\";\nimport Link_6 from \"../Sprites/Link/6.png\";\nimport Link_7 from \"../Sprites/Link/7.png\";\nimport Link_8 from \"../Sprites/Link/8.png\";\n\nimport Position from \"__Components/Position.Component\";\nimport Sprite from \"__Components/Sprite.Component\";\nimport Health from \"../Components/Health.Component\";\nimport Coins from \"../Components/Coins.Component\";\nimport Collider from \"__Components/Collider.Component\";\nimport Input from \"__Components/Input.Component\";\nimport Movement from \"__Components/Movement.Component\";\nimport SpriteAnimation from \"__Components/SpriteAnimation.Component\";\nimport Scene from \"__Core/Scene\";\n\nexport default class Player extends Entity {\n    playerSpeed = 0.0035;\n\n    constructor({ spawn = { x: 0, y: 0 } }: IPlayerProps) {\n        super({ tag: \"player\", x: spawn.x, y: spawn.y });\n\n        const sprite = new Sprite({ src: Link_1, width: 1, height: 1 });\n        const health = new Health(3);\n        const coins = new Coins(0);\n        const collider = new Collider({ width: 1, height: 1, isStatic: false, onCollision: this.handleCollision.bind(this) });\n        const movement = new Movement({ x: 0, y: 0, onStop: this.handleStop });\n        const animation = new SpriteAnimation([\n            { name: 'standing_n', frames: [Link_3], interval: 300 },\n            { name: 'standing_s', frames: [Link_1], interval: 300 },\n            { name: 'standing_e', frames: [Link_4], interval: 300 },\n            { name: 'standing_w', frames: [Link_2], interval: 300 },\n            { name: 'walking_n', frames: [Link_3, Link_7], interval: 300, nextState: 'standing_n' },\n            { name: 'walking_s', frames: [Link_1, Link_5], interval: 300, nextState: 'standing_s' },\n            { name: 'walking_e', frames: [Link_4, Link_8], interval: 300, nextState: 'standing_e' },\n            { name: 'walking_w', frames: [Link_2, Link_6], interval: 300, nextState: 'standing_w' },\n        ], \"standing_s\");\n        this.addComponent(sprite);\n        this.addComponent(health);\n        this.addComponent(coins);\n        this.addComponent(collider);\n        this.addComponent(movement);\n        this.addComponent(animation);\n\n        /* Inputs */\n        const input = new Input({\n            config: {\n                \"w\": () => this.handleInputMovement(\"n\"),\n                \"a\": () => this.handleInputMovement(\"w\"),\n                \"s\": () => this.handleInputMovement(\"s\"),\n                \"d\": () => this.handleInputMovement(\"e\"),\n            }\n        });\n        this.addComponent(input);\n    }\n\n    handleInputMovement = (direction) => {\n        const animation = this.getComponent(SpriteAnimation) as SpriteAnimation;\n        const movement = this.getComponent(Movement) as Movement;\n\n        animation.changeState(`walking_${direction}`);\n\n        if (direction === \"n\") movement.addSpeed(0, -this.playerSpeed);\n        if (direction === \"s\") movement.addSpeed(0, this.playerSpeed);\n        if (direction === \"w\") movement.addSpeed(-this.playerSpeed, 0);\n        if (direction === \"e\") movement.addSpeed(this.playerSpeed, 0);\n    }\n\n    handleStop = () => {\n        const animation = this.getComponent(SpriteAnimation) as SpriteAnimation;\n        animation.nextState();\n    }\n\n    handleCollision(target: Entity, scene: Scene) {\n        if (target.tag === \"doorway\") {\n            /* scene.end(); */\n        }\n        if (target.tag === \"coin\") {\n            (this.getComponent(Coins) as Coins).earnCoins(1);\n            scene.removeEntity(target.id);\n        }\n        if ((target.getComponent(Collider) as Collider).isRigid) {\n            const position = this.getComponent(Position) as Position;\n            const collider = this.getComponent(Collider) as Collider;\n\n            /* Obtain safe position and restore it */\n            const { x, y } = collider.getSafePosition();\n            position.setPosition(x, y);\n            collider.saveSafePosition(x, y);\n        }\n    }\n}\n\ninterface IPlayerProps {\n    spawn: {\n        x: number;\n        y: number;\n    }\n}", "import System from \"__Core/System\";\n\nexport default class SystemDebugPlayer extends System {\n    update(time, entities) {\n        entities\n            .filter(entity => entity.tag === \"player\")\n            .forEach(({ components }) => {\n                const debugText = document.getElementById(\"player-debugText\");\n                debugText.textContent = `${JSON.stringify(components, null, 4)}`;\n            });\n    }\n\n    start() {\n        const debugText = document.createElement(\"pre\");\n        debugText.setAttribute(\"id\", \"player-debugText\");\n        document.getElementById(\"root\").append(debugText);\n    }\n\n    end() {\n        const meter = document.getElementById(\"player-debugText\");\n        meter.remove();\n    }\n}", "import Collider from \"__Components/Collider.Component\";\nimport Tilemap from \"__Components/Tilemap.Component\";\nimport Entity from \"__Core/Entity\";\nimport BricksTileset from \"../Tilesets/bricks\";\n\nconst tilesPerDirection = {\n    n: 1,\n    w: 11,\n    e: 13,\n    s: 23\n}\n\nconst cornerTiles = {\n    n: [0, 2],\n    s: [22, 24]\n}\n\nexport default class Wall extends Entity {\n    side: string = \"n\";\n\n    constructor({ id = \"wall\", side, x = 0, y = 0, length = 1 }: IWallProps) {\n        super({ id, x, y });\n\n        this.side = side;\n\n        let width = 1;\n        let height = 1;\n        if (side === \"n\" || side === \"s\") width = length;\n        if (side === \"w\" || side === \"e\") height = length;\n\n        const wallTileMap = (new Array(height))\n            .fill(\n                (new Array(width)).fill(tilesPerDirection[side])\n            );\n\n        this.addComponent(new Tilemap(BricksTileset, wallTileMap));\n        this.addComponent(new Collider({ width, height, isRigid: true }));\n    }\n}\n\ninterface IWallProps {\n    id: string;\n    side: string;\n    x?: number;\n    y?: number;\n    length?: number;\n}", "import { ROOM_WIDTH, ROOM_HEIGHT, TILE_SIZE } from \"../../constants\";\n\nimport PNGSpriteRender from \"__Systems/PNGSpriteRender.System\";\nimport rollDice from \"__Utils/dice\";\nimport Scene from \"__Core/Scene\";\nimport SystemCollision from \"__Systems/Collision.System\";\n\nimport Coin from \"../../Objects/Coin\";\nimport SystemCoinMeter from \"../../Systems/SystemCoinMeter\";\nimport Doorway, { DoorwayDirection } from \"../../Objects/Doorway\";\nimport Floor from \"../../Objects/Floor\";\nimport Player from \"../../Objects/Player\";\nimport SystemDebugPlayer from \"../../Systems/SystemDebugPlayer\";\nimport Wall from \"../../Objects/Wall\";\n\nexport default class Gameplay extends Scene {\n    constructor() {\n        super(\"root\");\n\n        const randomPosition = () => ({ x: rollDice(2, ROOM_WIDTH - 2), y: rollDice(2, ROOM_HEIGHT - 2) });\n\n        const player = new Player({ spawn: randomPosition() });\n        const floor = new Floor();\n        const walls = [\n            ...this.generateWall(\"n\"),\n            ...this.generateWall(\"e\"),\n            ...this.generateWall(\"s\"),\n            ...this.generateWall(\"w\")\n        ];\n\n\n        const coins = [];\n\n        let i = 12;\n        while (i > 0) {\n            coins.push(\n                new Coin(randomPosition())\n            );\n            i--;\n        }\n        //const doorwayW = new Doorway({ id: \"doorway_w\", x: 0, y: (ROOM_HEIGHT - 2) / 2 });\n\n        const coinMeter = new SystemCoinMeter();\n        const spriteRendering = new PNGSpriteRender();\n        const collisions = new SystemCollision();\n\n        /* To be disabled... */\n        const debug = new SystemDebugPlayer();\n\n        [player, floor, ...coins, ...walls].forEach(this.addEntity);\n        [spriteRendering, coinMeter, collisions, debug].forEach(this.addSystem);\n    }\n\n    generateWall(direction = \"n\", doorway = 'closed') {\n        const wallEntities = [];\n\n        const horLength = 8;\n        const verLength = 4;\n\n        if (direction === 'n') {\n            wallEntities.push(\n                new Wall({ side: \"n\", id: \"wallN1\", x: 1, y: 0, length: horLength }),\n                new Wall({ side: \"n\", id: \"wallN2\", x: ROOM_WIDTH - 9, y: 0, length: horLength }),\n                new Doorway({ x: ROOM_WIDTH - 9 - 2, y: 0, direction: DoorwayDirection.Horizontal })\n            )\n        }\n        if (direction === 'w') {\n            wallEntities.push(\n                new Wall({ side: \"w\", id: \"wallW1\", x: 0, y: 1, length: verLength }),\n                new Wall({ side: \"w\", id: \"wallW2\", x: 0, y: ROOM_HEIGHT - 5, length: verLength }),\n                new Doorway({ x: 0, y: ROOM_HEIGHT - 5 - 2, direction: DoorwayDirection.Vertical })\n            )\n        }\n        if (direction === 's') {\n            const yOffset = ROOM_HEIGHT - 1;\n            wallEntities.push(\n                new Wall({ side: \"s\", id: \"wallS1\", x: 1, y: yOffset, length: horLength }),\n                new Wall({ side: \"s\", id: \"wallS2\", x: ROOM_WIDTH - 9, y: yOffset, length: horLength }),\n                new Doorway({ x: ROOM_WIDTH - 9 - 2, y: yOffset + 1, direction: DoorwayDirection.Horizontal })\n            )\n        }\n        if (direction === 'e') {\n            const xOffset = ROOM_WIDTH - 1;\n            wallEntities.push(\n                new Wall({ side: \"e\", id: \"wallE1\", x: xOffset, y: 1, length: verLength }),\n                new Wall({ side: \"e\", id: \"wallE2\", x: xOffset, y: ROOM_HEIGHT - 5, length: verLength }),\n                new Doorway({ x: xOffset + 1, y: ROOM_HEIGHT - 5 - 2, direction: DoorwayDirection.Vertical })\n            )\n        }\n\n        return [...wallEntities];\n    }\n}", "import GameLoop from \"__Core/GameLoop\";\nimport Room from \"./Scenes/Room\";\n\ndocument.addEventListener('readystatechange', event => {\n    // When HTML/DOM elements are ready:\n    if (event.target.readyState === \"interactive\") {   //does same as:  ..addEventListener(\"DOMContentLoaded\"..\n        //alert(\"hi 1\");\n    }\n\n    // When window loaded ( external resources are loaded too- `css`,`src`, etc...)\n    if (event.target.readyState === \"complete\") {\n        const dungeonRoom = new Room();\n        const game = new GameLoop([dungeonRoom]);\n\n        game.start();\n    }\n});"],
  "mappings": "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",
  "names": []
}
